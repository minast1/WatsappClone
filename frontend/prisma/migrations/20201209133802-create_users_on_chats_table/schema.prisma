generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["uncheckedScalarInputs"]
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  messages      Message[] // A user can have many todos
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  Chat          Chat[]
  files         File[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Message {
  id        Int      @id @default(autoincrement())
  body      String
  owner     User     @relation(fields: [userId], references: [id])
  userId    Int
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    Int?
  isFile    Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")


  @@map(name: "messages")
}

model Chat {
  id        Int       @id @default(autoincrement())
  name      String
  messages  Message[]
  owner     User?     @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")


  @@map(name: "chats")
}

model File {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  owner     User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "files")
}

model UsersOnChats {
  chat  Chat  @relation(fields:[chatId], references: [id])
  chatId   Int 
  participant User @relation(fields:[participantId] , references: [id])
  participantId Int 
  createdAt   DateTime @default(now())

  @@id([chatId, participantId])
}
